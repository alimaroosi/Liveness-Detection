# -*- coding: utf-8 -*-
"""Detect spoofing

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HN0xmAUjfgVLccCV_QQ2Zg98WD9BZeNW
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

from pylab import imshow

import matplotlib.pyplot as plt

import numpy as np

import cv2

import torch

import seaborn as sns

import pandas as pd

!pip install -U albumentations

import albumentations as albu

from albumentations.pytorch.transforms import ToTensorV2

!pip install iglovikov_helper_functions > /dev/null

from iglovikov_helper_functions.dl.pytorch.utils import tensor_from_rgb_image
from iglovikov_helper_functions.utils.image_utils import load_rgb

!wget https://habrastorage.org/webt/g7/nc/jw/g7ncjwscv4o5ft86fj2okl4adec.png > /dev/null
!wget https://habrastorage.org/webt/yd/4i/r8/yd4ir8hnmhgmly1hgwcoyyhbgdm.jpeg > /dev/null

!pip install datasouls_antispoof  > /dev/null

from datasouls_antispoof.pre_trained_models import create_model

from datasouls_antispoof.class_mapping import class_mapping

model = create_model("tf_efficientnet_b3_ns")

model.eval();

image_replay = load_rgb("g7ncjwscv4o5ft86fj2okl4adec.png")

imshow(image_replay)

transform = albu.Compose([albu.PadIfNeeded(min_height=400, min_width=400),
                          albu.CenterCrop(height=400, width=400), 
                          albu.Normalize(p=1), 
                          albu.pytorch.ToTensorV2(p=1)], p=1)

with torch.no_grad():
  prediction = model(torch.unsqueeze(transform(image=image_replay)['image'], 0)).numpy()[0]

df = pd.DataFrame({"prediction": prediction, "class_name": class_mapping.keys()})
sns.barplot(data=df, x="prediction", y="class_name")

image_real = load_rgb("yd4ir8hnmhgmly1hgwcoyyhbgdm.jpeg")

imshow(image_real)

with torch.no_grad():
  prediction = model(torch.unsqueeze(transform(image=image_real)['image'], 0)).numpy()[0]

df = pd.DataFrame({"prediction": prediction, "class_name": class_mapping.keys()})
sns.barplot(data=df, x="prediction", y="class_name")



